// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shared_protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoGetterClient is the client API for GoGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoGetterClient interface {
	GetOfferings(ctx context.Context, in *OfferingsRequest, opts ...grpc.CallOption) (*OfferingsResponse, error)
}

type goGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewGoGetterClient(cc grpc.ClientConnInterface) GoGetterClient {
	return &goGetterClient{cc}
}

func (c *goGetterClient) GetOfferings(ctx context.Context, in *OfferingsRequest, opts ...grpc.CallOption) (*OfferingsResponse, error) {
	out := new(OfferingsResponse)
	err := c.cc.Invoke(ctx, "/go_getter_grpc.GoGetter/GetOfferings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoGetterServer is the server API for GoGetter service.
// All implementations must embed UnimplementedGoGetterServer
// for forward compatibility
type GoGetterServer interface {
	GetOfferings(context.Context, *OfferingsRequest) (*OfferingsResponse, error)
	mustEmbedUnimplementedGoGetterServer()
}

// UnimplementedGoGetterServer must be embedded to have forward compatible implementations.
type UnimplementedGoGetterServer struct {
}

func (UnimplementedGoGetterServer) GetOfferings(context.Context, *OfferingsRequest) (*OfferingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferings not implemented")
}
func (UnimplementedGoGetterServer) mustEmbedUnimplementedGoGetterServer() {}

// UnsafeGoGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoGetterServer will
// result in compilation errors.
type UnsafeGoGetterServer interface {
	mustEmbedUnimplementedGoGetterServer()
}

func RegisterGoGetterServer(s grpc.ServiceRegistrar, srv GoGetterServer) {
	s.RegisterService(&GoGetter_ServiceDesc, srv)
}

func _GoGetter_GetOfferings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGetterServer).GetOfferings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_getter_grpc.GoGetter/GetOfferings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGetterServer).GetOfferings(ctx, req.(*OfferingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoGetter_ServiceDesc is the grpc.ServiceDesc for GoGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_getter_grpc.GoGetter",
	HandlerType: (*GoGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOfferings",
			Handler:    _GoGetter_GetOfferings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared-protobufs/go-getter.proto",
}
